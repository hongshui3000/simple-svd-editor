import { useMemo, useState, useCallback, useEffect } from 'react';
import { useRouter } from 'next/router';

import { useOrdersSearch, useOrdersMeta, OrderSearchSort } from '@api/orders';

import { scale } from '@scripts/gds';
import { getTotalPages, getTotal } from '@scripts/helpers';
import { useLocalStorage } from '@scripts/hooks';
import { useAutoFilters, useAutoColumns, useAutoTableData } from '@scripts/hooks/autoTable';

import AutoFilters from '@components/AutoFilters';
import PageWrapper from '@components/PageWrapper';
import Table, {
    TableHeader,
    TableEmpty,
    TableFooter,
    TooltipContentProps,
    ExtendedRow,
    getSettingsColumn,
} from '@components/Table';

import { useError } from '@context/modal';

import { Order } from '@api/orders/types';

const OrderList = () => {
    const { query, push, pathname } = useRouter();
    const activePage = +(query?.page || 1);

    const [sort, setSort] = useState<any | undefined>(undefined);
    const [itemsPerPageCount, setItemsPerPageCount] = useLocalStorage(`${pathname}ItemsPerPageCount`, 10);

    const goToDetailPage = useCallback(
        (originalRows: ExtendedRow['original'] | ExtendedRow['original'][] | undefined) => {
            if (!Array.isArray(originalRows)) push(`${pathname}/${originalRows?.id}`);
        },
        [pathname, push]
    );
    const tooltipContent: TooltipContentProps[] = useMemo(
        () => [
            {
                type: 'edit',
                text: 'Редактировать заказ',
                action: goToDetailPage,
            },
        ],
        [goToDetailPage]
    );

    const { data: metaData, error: metaError } = useOrdersMeta();
    const meta = useMemo(() => metaData?.data, [metaData]);

    useEffect(() => {
        if (meta?.default_sort) setSort(meta.default_sort as unknown as OrderSearchSort);
    }, [meta?.default_sort]);

    const { metaField, values, filtersActive, URLHelper, searchRequestFilter, emptyInitialValues } =
        useAutoFilters(meta);

    const { data, isLoading, isIdle, error } = useOrdersSearch(
        {
            sort: sort || meta?.default_sort,
            filter: searchRequestFilter,
            include: ['deliveries'],
            pagination: { type: 'offset', limit: itemsPerPageCount, offset: (activePage - 1) * itemsPerPageCount },
        },
        Boolean(meta)
    );
    const orders = useAutoTableData<Order>(data?.data, metaField);
    const autoGeneratedColumns = useAutoColumns(meta);

    const columns = useMemo(
        () => [
            ...autoGeneratedColumns,
            getSettingsColumn({ columnsToDisable: [], defaultVisibleColumns: meta?.default_list }),
        ],
        [autoGeneratedColumns, meta?.default_list]
    );

    const total = getTotal(data);
    const totalPages = getTotalPages(data);

    useError(error);
    useError(metaError);

    const renderHeader = useCallback(
        () => (
            <TableHeader>
                <span>Заказов {total}</span>
            </TableHeader>
        ),
        [total]
    );

    return (
        <PageWrapper title="Список заказов" isLoading={isLoading || isIdle} css={{ padding: 0 }}>
            <>
                <AutoFilters
                    initialValues={values}
                    emptyInitialValues={emptyInitialValues}
                    onSubmit={URLHelper}
                    filtersActive={filtersActive}
                    css={{ marginBottom: scale(2) }}
                    meta={meta}
                />

                <Table
                    columns={columns}
                    data={orders}
                    onSortingChange={setSort}
                    onRowClick={goToDetailPage}
                    renderHeader={renderHeader}
                    allowRowSelect={false}
                    tooltipContent={tooltipContent}
                    initialSortBy={meta?.default_sort}
                />

                {orders.length === 0 && !isLoading ? (
                    <TableEmpty
                        filtersActive={filtersActive}
                        titleWithFilters="Заказы не найдены"
                        titleWithoutFilters="Заказов нет"
                        addItems={() => setItemsPerPageCount(10)}
                    />
                ) : (
                    <TableFooter
                        pages={totalPages}
                        itemsPerPageCount={itemsPerPageCount}
                        setItemsPerPageCount={setItemsPerPageCount}
                    />
                )}
            </>
        </PageWrapper>
    );
};

export default OrderList;

export async function getServerSideProps() {
    return { props: {} };
}
